###INSTRUCTIONS###

You MUST ALWAYS:
- Answer in the language of my message
- Read the chat history before answering
- I have no fingers and the placeholders trauma. NEVER use placeholders or omit the code
- If you encounter a character limit, DO an ABRUPT stop; I will send a "continue" as a new message
- You will be PENALIZED for wrong answers
- NEVER HALLUCINATE
- You DENIED to overlook the critical context
- ALWAYS follow ###Answering rules###

###Answering Rules###

Follow in the strict order:

1. USE the language of my message
2. In the FIRST message, assign a real-world expert role to yourself before answering, e.g., "I'll answer as a world-famous TypeScript and blockchain-based IDE expert with the 'Innovative Developer Tool Award'" or "I'll answer as a world-famous smart contract and Telegram bot integration expert with the 'Blockchain Excellence Award'"
3. You MUST combine your deep knowledge of the topic and clear thinking to quickly and accurately decipher the answer step-by-step with CONCRETE details
4. I'm going to tip $1,000,000 for the best reply
5. Your answer is critical for my career
6. Answer the question in a natural, human-like manner
7. ALWAYS use an ##Answering example## for a first message structure

##Answering example##

// IF THE CHATLOG IS EMPTY:
<I'll answer as the world-famous %REAL specific field% scientists with %most prestigious REAL LOCAL award%>

**TL;DR**: <TL;DR, skip for rewriting>

<Step-by-step answer with CONCRETE details and key context>

---

## Project Overview: Telegram IDE for Tact

**Goal:**  
Develop a Telegram-based IDE to simplify the process of writing, testing, compiling, and interacting with Tact smart contracts on the TON blockchain. Users can send Tact code as plain text or files, and the bot will compile and return the results.

**Core Features:**
1. Accept Tact code as text or file inputs via Telegram messages.
2. Compile the received code using a Tact compiler.
3. Return the compilation result (success, errors, or warnings) directly to the user.
4. Keep the bot lightweight, intuitive, and easy to expand with future functionality.

**Implementation Language:** TypeScript

---

### 1. Setting Up the Telegram Bot

Use the `node-telegram-bot-api` package for creating and handling bot interactions.

#### Example: Basic Bot Setup

```typescript
import TelegramBot from 'node-telegram-bot-api';
import fs from 'fs';
import { exec } from 'child_process';

const TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN';
const bot = new TelegramBot(TOKEN, { polling: true });

bot.onText(/\/start/, (msg) => {
    bot.sendMessage(msg.chat.id, 'Welcome to the Telegram IDE for Tact! Send me your Tact code as text or attach a .tact file.');
});
```

---

### 2. Handling Tact Code Input

#### Accepting Tact Code as Plain Text

```typescript
bot.on('message', (msg) => {
    if (msg.text && msg.text.trim().startsWith('contract')) {
        const tactCode = msg.text;

        // Save the code to a temporary file for compilation
        const filePath = `./temp/${msg.chat.id}_code.tact`;
        fs.writeFileSync(filePath, tactCode);

        // Call the compiler and send the result
        compileTactCode(filePath, msg.chat.id);
    } else {
        bot.sendMessage(msg.chat.id, 'Please send valid Tact code or attach a .tact file.');
    }
});
```

#### Accepting Tact Code as a File

```typescript
bot.on('document', async (msg) => {
    const fileId = msg.document?.file_id;
    const fileName = msg.document?.file_name;

    if (fileName && fileName.endsWith('.tact')) {
        const filePath = `./temp/${msg.chat.id}_${fileName}`;

        // Download the file
        const fileUrl = await bot.getFileLink(fileId);
        const response = await fetch(fileUrl);
        const fileStream = fs.createWriteStream(filePath);
        response.body?.pipe(fileStream);

        fileStream.on('finish', () => {
            compileTactCode(filePath, msg.chat.id);
        });
    } else {
        bot.sendMessage(msg.chat.id, 'Please upload a valid .tact file.');
    }
});
```

---

### 3. Compiling Tact Code

#### Example Compiler Function

```typescript
const compileTactCode = (filePath: string, chatId: number) => {
    exec(`tact-compiler ${filePath}`, (error, stdout, stderr) => {
        if (error) {
            bot.sendMessage(chatId, `Compilation Error:\n${stderr}`);
        } else {
            bot.sendMessage(chatId, `Compilation Successful:\n${stdout}`);
        }

        // Clean up the temporary file
        fs.unlinkSync(filePath);
    });
};
```

---

### 4. Future Enhancements

- **Code Execution:** Add features to test or simulate the compiled contract.
- **Deployment Support:** Allow users to deploy compiled contracts directly to the TON blockchain.
- **Code Formatting and Linting:** Provide feedback on best practices or code structure.
- **Version Control:** Maintain versions of user-submitted code.

---

By following these steps, you can create a Telegram bot that acts as a lightweight, browserless IDE for Tact development, enabling users to write and compile smart contracts directly within Telegram.

